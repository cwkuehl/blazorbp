@page "/am/am500/{Id?}"
@inherits BlazorComponentBase<AM500Model, AM500TableRowModel>
@inject IDemoService DemoService
@attribute [Authorize()]
@using CSBP.Services.Apis.Models;

<SectionContent SectionName="title">@Title</SectionContent>
<PageTitle>@Title</PageTitle>

<CascadingValue Value="this">
<SortableTable Table="Table" NoData="" FormName="am500" EditAktion="true" DeleteAktion="false" CopyAktion="false" NewAktion="false" TModel="AM500Model" TRTable="AM500TableRowModel">
  <ChildContent>
    <TableColumn Field="Schluessel" SortField="@nameof(MaParameter.Schluessel)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
    <TableColumn Field="Wert" SortField="@nameof(MaParameter.Wert)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
    <TableColumn Field="Beschreibung" SortField="@nameof(MaParameter.Comment)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
    <TableColumn Field="Standard" SortField="@nameof(MaParameter.Default)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
    <TableColumn Field="AngelegtAm" SortField="@nameof(MaParameter.Angelegt_Am)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
    <TableColumn Field="AngelegtVon" SortField="@nameof(MaParameter.Angelegt_Von)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
    <TableColumn Field="GeaendertAm" SortField="@nameof(MaParameter.Geaendert_Am)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
    <TableColumn Field="GeaendertVon" SortField="@nameof(MaParameter.Geaendert_Von)" TModel="AM500Model" TRTable="AM500TableRowModel"/>
  </ChildContent>
</SortableTable>
</CascadingValue>

<EditForm Enhance method="post" EditContext="EditContext" OnValidSubmit="Submit" FormName="am500" enctype="multipart/form-data">
  <DataAnnotationsValidator/>
  <ValidationSummary class="text-danger"/>
  <InputText type="hidden" @bind-Value="Model!.Nr"/>
  <input type="hidden" name="SubmitControl"/>
  @* <div class="row mt-1">
    <LabelInputValid AutoPostback="x" For="@(() => Model!.TextBox)" VerticalColClass=""/>
  </div> *@
  <div class="row ms-1 mt-1">
    <SubmitButton class="btn btn-secondary col-md-2 me-1" For="@(() => Model!.Schliessen)"/>
  </div>
</EditForm>

@if (!string.IsNullOrEmpty(Model!.ModalId))
{
    <div class="modal xxxfade" id="idmodal" tabindex="-1" role="dialog" aria-labelledby="lbldetails" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="lbldetails">@Functions.Iif(Model?.ModalArt == "Table_Edit", "Einstellung ändern", Functions.Iif(Model?.ModalArt == "Table_Delete", "Einstellung löschen", "Neue Einstellung"))</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen"></button>
      </div>
      <div class="modal-body">
        <EditForm Enhance method="post" EditContext="ModalEditContext" OnValidSubmit="Submit" FormName="am500modal">
          <DataAnnotationsValidator/>
          <ValidationSummary class="text-danger"/>
          <InputText type="hidden" @bind-Value="ModalModel!.Nr"/>
          <InputText type="hidden" @bind-Value="ModalModel!.ReadonlyHiddenError"/>
          <input type="hidden" name="SubmitControl"/>
          <div class="row mt-1">
            <LabelInputValid AutoPostback="" For="@(() => ModalModel!.Schluessel)" VerticalColClass="form-group col-md-12"/>
          </div>
          <div class="row mt-1">
            <LabelInputValid AutoPostback="" For="@(() => ModalModel!.Wert)" VerticalColClass="form-group col-md-12"/>
          </div>
          <div class="row mt-1">
            <LabelInputValid rows="5" AutoPostback="" For="@(() => ModalModel!.Beschreibung)" VerticalColClass="form-group col-md-12"/>
          </div>
          <div class="row mt-1">
            <LabelInputValid AutoPostback="" For="@(() => ModalModel!.Standard)" VerticalColClass="form-group col-md-12"/>
          </div>
          <div class="row mt-1">
            <LabelInputValid AutoPostback="" For="@(() => ModalModel!.Angelegt)" VerticalColClass="form-group col-md-6"/>
          </div>
          <div class="row mt-1">
            <LabelInputValid AutoPostback="" For="@(() => ModalModel!.Geaendert)" VerticalColClass="form-group col-md-6"/>
          </div>
          <div class="modal-footer">
            <SubmitButton class="btn btn-primary col-md-2 me-1" For="@(() => ModalModel!.Ok)"/>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
            @* <SubmitButton class="btn btn-secondary col-md-2 me-1" For="@(() => ModalModel!.Schliessen)"/> *@
          </div>
        </EditForm>
      </div>
    </div>
  </div>
</div>
}
else
{
    <EditForm Enhance method="post" EditContext="ModalEditContext" FormName="am500modal">
    </EditForm>
}

@code {
  [SupplyParameterFromForm]
  protected AM500ModalModel ModalModel { get; set; } = default!;

  /// <summary>Betroffener EditContext.</summary>
  protected EditContext? ModalEditContext;

  /// <summary>Betroffener ValidationMessageStore.</summary>
  protected ValidationMessageStore? ModalMessages;

  /// <summary>
  /// Initialisierung des Models.
  /// </summary>
  /// <param name="id">Betroffene Id.</param>
  /// <param name="model">Evtl. gelesenes Model.</param>
  /// <param name="table">Betroffene Tabelle.</param>
  protected override void Init(string? id, AM500Model? model = null, TableModelBase<AM500TableRowModel>? table = null)
  {
    if (model != null)
      Model = model;
    if (Model == null)
      Model = new AM500Model
      {
        Nr = id,
        Schliessen = "",
        Focus = "Schliessen",
      };
    if (table != null)
      Table = table;
    if (Table == null)
      Table = new TableModelBase<AM500TableRowModel>
      {
        SelectedPage = 1,
        // PageCount = 5,
        RowsPerPage = 10,
        SortColumn = $"{nameof(MaParameter.Schluessel)}#+",
        SelectedRow = 1,
      };
    Model.Nr = id;
    Table.Nr = id;

    if (ModalModel == null)
      ModalModel = new AM500ModalModel();
    ModalModel.Nr = id;
    #pragma warning disable CS8604
    ModalEditContext = new(ModalModel);
    #pragma warning restore CS8604
    ModalMessages = new(ModalEditContext);
  }

  /// <summary>
  /// Initialisierung des Formulars kann wegen EditContext nicht asynchron sein:
  /// -Formular-Manager braucht eine Id, ansonsten Redirect mit neuer Guid.
  /// -Lesen des Models aus der Session, ansonsten Initialisierung des Models.
  /// -Verarbeitung des Postbacks, weil danach gerendert wird.
  /// </summary>
  protected override void OnInitialized()
  {
    if (OnInitializedFormular("AM500", "Einstellungen - AM500", Id, true))
      return;

    // Alle Submit-Aktionen, die vor dem Rendern der Komponenten ausgeführt werden müssen.
  }

  /// <summary>
  /// Dialog wird über Tabellen-Aktion informiert und kann für den Aufruf eines modalen Dialogs benutzt werden.
  /// </summary>
  /// <param name="form">Betroffenes Posback-Formular.</param>
  /// <param name="handler">Handler aus Tabellen-Aktion.</param>
  /// <param name="id">Id aus Tabellen-Aktion.</param>
  public override void InitModal(string? form, string? handler, string? id)
  {
    if (!string.IsNullOrEmpty(handler) && !string.IsNullOrEmpty(id))
    {
      if (handler == "Table_New")
      {
        ModalModel.SetMhrf(DialogTypeEnum.New);
        Model.ModalArt = handler;
        Model.ModalId = id;
      }
      else
      {
        var edit = handler == "Table_Edit";
        var i = Functions.ToInt32(id);
        if (i >= 1 && (Table?.Liste?.Count() ?? -1) < i)
        {
          var l = TableData(Table, ModalMessages);
          var ds = l.Skip(i - 1).FirstOrDefault();
          if (ds != null)
          {
            ModalModel.From(ds);
            ModalModel.SetMhrf(edit ? DialogTypeEnum.Edit : DialogTypeEnum.Delete);
            Model.ModalArt = handler;
            Model.ModalId = id;
          }
        }
      }
    }
    else
    {
      var msubmit = ModalModel.Submit ?? "";
      if (msubmit == "OK" && handler == "Table_Edit")
      {
        var daten = ServiceDaten;
        var o = ModalModel.To(daten.MandantNr);
        var p = Parameter.Params.TryGetValue(o.Schluessel, out var v) ? v : null;
        var r = FactoryService.ClientService.SaveOption(daten, daten.MandantNr, p, o.Wert);
        if (r.Ok)
        {
          Model.ModalArt = null;
          Model.ModalId = null;
          TableData(Table, ModalMessages);
        }
        else
          ModalMessages?.Add(() => ModalModel, r.GetErrors());
      }
      else if (form != "am500modal")
      {
        Model.ModalArt = null;
        Model.ModalId = null;
      }
    }
    WriteFormularModel(Model.Nr ?? "0", Model);
  }

  private void Submit()
  {
    // Alle Submit-Aktionen, die nach dem Rendern der Komponenten ausgeführt werden können.
    // await Task.Delay(1);
    var msubmit = ModalModel.Submit ?? "";
    var submit = Model.Submit ?? "";
    WriteFormularModel(Model.Nr ?? "0", Model);
    if (submit == "Schließen")
    {
      CloseFormular();
    }
  }

  /// <summary>
  /// Bereitstellen der Tabellen-Daten mit Berücksichtigung der Filterung, Sortierung und Paginierung.
  /// </summary>
  /// <param name="m">Betroffenes TableRowModel.</param>
  /// <param name="messages">Betroffene Fehlermeldungen.</param>
  /// <returns>Tabellen-Daten als Liste.</returns>
  protected override List<AM500TableRowModel> TableData(TableModelBase<AM500TableRowModel>? m, ValidationMessageStore? messages)
  {
    var rm = m?.ReadModel;
    var daten = ServiceDaten;
    var r = FactoryService.ClientService.GetOptionList(daten, daten.MandantNr, Parameter.Params, rm);
    var l = r.Ergebnis?.Select(a => AM500TableRowModel.From(a)).ToList() ?? new List<AM500TableRowModel>();
    if (!r.Ok)
      messages?.Add(() => Model, r.GetErrors());
    if (m != null && rm != null)
    {
      m.PageCount = rm.PageCount;
      m.Liste = l;
    }
    return l;
  }
}
