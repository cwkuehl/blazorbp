@inject AuthenticationStateProvider AuthenticationStateProvider

@if (!string.IsNullOrEmpty(Model))
{
<EditForm Enhance method="post" Model="Model" OnSubmit="Submit" FormName="formlogout">
  <input type="hidden" id="countdowninterval" value="@Sekunden"/>
  <button class="btn btn-secondary btn-sm float-end" type="submit" title="Abmelden (Sekunden bis zum automatischen Abmelden)">
    <span class="badge bg-secondary fs-6" id="benutzerid">@Model</span>
    <span class="bi bi-box-arrow-right-nav-menu" aria-hidden="true"></span>
    <span class="badge bg-secondary fs-6" id="countdown">@Functions.ToString(Sekunden) s</span>
  </button>
</EditForm>
}

@code
{
  /// <summary>Holt oder setzt die Anzahl Sekunden f√ºr die automatische Abmeldung.</summary>
  [Parameter]
  public int Sekunden { get; set; } = 30;

  [Inject]
  NavigationManager Navigation { get; set; } = default!;

  [CascadingParameter]
  protected HttpContext HttpContext { get; set; } = default!;

  // [SupplyParameterFromForm]
  private string? Model { get; set; } = "";

  protected override async Task OnInitializedAsync()
  {
    // Wegen static SSR KEIN async! Das Model muss sofort vorhanden sein.
    // if (Model == null)
    //   Model = "nix";
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    if (user?.Identity?.IsAuthenticated ?? false)
    {
      Model = user.Identity.Name;
    }
  }
   private async Task Submit()
  {
    await Task.Delay(1);
    Navigation.NavigateTo($"/auth/logout", true);
  }
}